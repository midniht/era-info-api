#!/bin/bash

humanize_size() {
  while read file_bytes dummy; do
    [ $file_bytes -lt 1024 ] && echo ${file_bytes} B && break
    file_kilobytes=$(((file_bytes+512)/1024))
    [ $file_kilobytes -lt 1024 ] && echo ${file_kilobytes} KB && break
    file_megabytes=$(((file_kilobytes+512)/1024))
    [ $file_megabytes -lt 1024 ] && echo ${file_megabytes} MB && break
    file_gigabytes=$(((file_megabytes+512)/1024))
    [ $file_gigabytes -lt 1024 ] && echo ${file_gigabytes} GB && break
    file_terabytes=$(((file_gigabytes+512)/1024))
    echo ${file_terabytes} TB
  done
}

init() {
  API_URL="api.erag.eu.org"
  if [ $# != 0 ] ; then
    API_TOKEN="$1"
  else
    token_file="`dirname $0`/ERA_API_TOKEN"
    if [ -f "${token_file}" ] ; then
      API_TOKEN=`sed -n '1p;1q' ${token_file}`
    else
      API_TOKEN=""
    fi
  fi
}

gen_json_body() {
  GAMEBASE_FILE=`find . -iwholename "./csv/gamebase.csv"`
  GAME_SLUG="$(basename `git rev-parse --show-toplevel`)"
  GAME_NAME=`cat "./README.md" | grep -m 1 "^# " | sed "s/^# //" | sed "s/ //g" | sed "s/\r*//g"`
  GAME_VERSION=`cat ${GAMEBASE_FILE} | grep -m 1 "^バージョン名" | sed "s/^バージョン名\s*,\s*//" | sed "s/ //g" | sed "s/\r*//g"`
  GAME_TITLE=`cat ${GAMEBASE_FILE} | grep -m 1 "^タイトル" | sed "s/^タイトル\s*,\s*//" | sed "s/^ *//g" | sed "s/\r*//g" | sed 's/\"/\\\"/g'`
  GAME_AUTHOR=`cat ${GAMEBASE_FILE} | grep -m 1 "^作者" | sed "s/^作者\s*,\s*//" | sed "s/^ *//g" | sed "s/\r*//g" | sed 's/\"/\\\"/g'`
  GAME_INFO=`cat ${GAMEBASE_FILE} | grep -m 1 "^追加情報" | sed "s/^追加情報\s*,\s*//" | sed "s/^ *//g" | sed "s/\r*//g" | sed 's/\"/\\\"/g'`

  temp=(`git ls-remote --get-url origin | tr '/' ' '`)
  GIT_COMMIT_URL="https://gitgud.io/era-games-zh/${temp[@]:(-2):1}/${GAME_SLUG}/-/commit/$(git rev-parse HEAD)"

  GAME_SIZE="$(du -b ${GAME_NAME}.zip | humanize_size)"

  if [ -f "${GAME_NAME}.zip" ] ; then
    GAME_HASH=`sha1sum ${GAME_NAME}.zip | awk '{print $1}'`
  else
    GAME_HASH="error: file ${GAME_NAME}.zip not found"
  fi

  json_body="{
  \"slug\": \"${GAME_SLUG}\",
  \"name\": \"${GAME_NAME}\",
  \"version\": \"${GAME_VERSION}\",
  \"update_at\": \"$(date '+%Y-%m-%d %H:%M:%S')\",
  \"title\": \"${GAME_TITLE}\",
  \"author\": \"${GAME_AUTHOR}\",
  \"description\": \"${GAME_INFO}\",
  \"message\": \"${GIT_COMMIT_URL}\n$(git log -3 --pretty='%B' | sed ':label;N;s/\n/\\n/;b label' | sed 's/^[ \s]\{1,\}//g;s/[ \s]\{1,\}$//g' | sed 's/\"/\\\"/g' | sed 's/\#/\\\#/g')\",
  \"size\": \"${GAME_SIZE}\",
  \"hash\": \"${GAME_HASH}\"
}"

  echo "Working Directory: \"$(pwd)\""
  echo "[DEBUG] JSON Body: ${json_body}"
}

update_api() {
  resp_code=`curl -l -s -w "%{http_code}" -o /tmp/update-era-games-data-result -X POST "https://${API_URL}/${GAME_SLUG}" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-Custom-PSK: ${API_TOKEN}" \
    -d "$json_body"`

  if [ $resp_code == "200" ] ; then
    echo -e "$(cat /tmp/update-era-games-data-result)\n版本信息数据库 https://${API_URL}/${GAME_SLUG}/version 更新成功"
  else
    echo -e "更新版本信息失败 返回的响应为 ${resp_code}\n$(cat /tmp/update-era-games-data-result)"
    exit 1
  fi
}

main() {
    init
    gen_json_body
    update_api
}

main "$@"
